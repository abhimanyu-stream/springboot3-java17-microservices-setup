spring.application.name=customer-service
#port on which the application should run
server.port=8800

# Eureka Client start
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.preferIpAddress=true
# Eureka Client end

#Cloud Config Sever Start
# application.properties (only for Config Client)
spring.config.import=optional:configserver:http://localhost:9595
#Note:- above import has higher precedence over uri. First of all default properties will always be imported.
spring.cloud.config.uri=http://localhost:9595
#Cloud Config Sever End



# MySQL DB JDBC Start

spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

spring.datasource.url=jdbc:mysql://localhost:3306/customer-service?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&characterEncoding=utf-8&autoReconnect=true

spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true

# Hibernate Properties
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
#below properties will automatically create and updates database schema
spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.connection.pool_size=5
spring.jpa.properties.hibernate.current_session_context_class=thread
# MySQL DB JDBC END





##################START ADMIN SERVER START####################
# BELOW IS CLIENT CONFIGURATION #

##################START ADMIN SERVER END####################



########## Swagger3 API Documentation Start##########
api.version=1.0
tos.uri=terms-of-service
toc.uri=terms-of-condition
api.server.url=localhost:9595/
api.server.url.prod=
api.server.url.qa=
api.server.url.dev=
api.description=The User API is used to create, update, and delete users and reset its password, change the user's Role if required form existing Role of User [  ROLE_MODERATOR,  ROLE_ADMIN,  ROLE_USER]  . If an account is created, the user will be granted the <strong>ROLE_USER</strong> role. The Post API is for creating post and doing CRUD operation . Each endpoints can be accessed by User's Role Type[  ROLE_MODERATOR,  ROLE_ADMIN,  ROLE_USER]
springdoc.swagger-ui.operationsSorter=e-commerce
springdoc.swagger-ui.tagsSorter=e-commerce

########## Swagger3 API Documentation End##########
